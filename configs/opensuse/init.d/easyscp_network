#!/bin/sh

# EasySCP a Virtual Hosting Control Panel
# Copyright (C) 2010-2013 by Easy Server Control Panel - http://www.easyscp.net
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @link 		http://www.easyscp.net
# @author 		EasySCP Team

### BEGIN INIT INFO
# Provides:             easyscp_network
# Required-Start:       $local_fs $remote_fs $network mysql
# Required-Stop:	$local_fs $remote_fs $network mysql
# Default-Start:        3 5
# Default-Stop:         0 1 2 6
# Short-Description:    EasySCP Network Traffic Logger
#
### END INIT INFO
# Note: do not modify any of these vars here, use /etc/default/$NAME instead

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DESC="EasySCP Network Traffic Logger"
NAME=easyscp_network
LFILE=/var/run/$NAME
IPTABLES=/usr/sbin/iptables
ENGINEPATH="/srv/www/easyscp/engine"
ENGINETOOLSPATH=${ENGINEPATH}"/tools"
NETWORKCARDMANAGER="easyscp-net-interfaces-mngr"
LOGDIR=/var/log/easyscp
LOGFILE=${LOGDIR}/${NAME}.log
DIETIME=3

START=1

# To monitor more ports, edit SERVICES variable add your own ports
# (ftp, proxy, http, etc.)
#
# HTTP(S): 80 443
# POP3(S): 110 995
# IMAP4(S)): 143 993
# MAIL(S): 25 465 587
SERVICES="80 443 110 143 25 465 587 995 993"
# To monitor more outgoing ports, edit SERVICES_OUT variable add your own ports
# (mail, etc.)
#
# MAIL(S): 25 465 587
SERVICES_OUT="25 465 587"

umask 027

# Debian LSB extensions (will be used if init-functions doesn't override them):
log_daemon_msg() {
	if [ ! -z "${2:-}" ]; then
		log_success_msg "${1:-}: ${2:-}"
	else
		log_success_msg "${1:-}"
	fi
}

log_end_msg() {
	local status="$1"
}

log_progress_msg () {
	log_success_msg " $@"
}

# if not present (e.g. *BSD) make sure to provide compatible methods via /etc/default/$NAME
if [ -f /lib/lsb/init-functions ]; then
	. /lib/lsb/init-functions
fi

# Read config file if present.
if [ -r /etc/default/$NAME ]; then
	. /etc/default/$NAME
fi

if [ $START -eq 0 ]; then
	log_warning_msg "Not starting $DESC: edit /etc/default/$NAME."
	exit 1
fi

add_rules() {
	${IPTABLES} -N EASYSCP_INPUT  2>> "$LOGFILE"
	${IPTABLES} -N EASYSCP_OUTPUT 2>> "$LOGFILE"

	# All traffic should jump through EASYSCP tables before anything else
	${IPTABLES} -I INPUT  -j EASYSCP_INPUT  2>> "$LOGFILE"
	${IPTABLES} -I OUTPUT -j EASYSCP_OUTPUT 2>> "$LOGFILE"

	# Services from matrix basically receiving data
	for PORT in $SERVICES; do
		${IPTABLES} -I EASYSCP_INPUT  -p tcp --dport "$PORT" 2>> "$LOGFILE"
		${IPTABLES} -I EASYSCP_OUTPUT -p tcp --sport "$PORT" 2>> "$LOGFILE"
	done

	# Services from matrix basically sending data
	for PORT in $SERVICES_OUT; do
		${IPTABLES} -I EASYSCP_INPUT  -p tcp --sport "$PORT" 2>> "$LOGFILE"
		${IPTABLES} -I EASYSCP_OUTPUT -p tcp --dport "$PORT" 2>> "$LOGFILE"
	done

	# Explicit return once done
	${IPTABLES} -A EASYSCP_INPUT  -j RETURN
	${IPTABLES} -A EASYSCP_OUTPUT -j RETURN

	# Touch lock file
	touch $LFILE
}

remove_rules() {
	${IPTABLES} -D INPUT  -j EASYSCP_INPUT  2>> "$LOGFILE"
	${IPTABLES} -D OUTPUT -j EASYSCP_OUTPUT 2>> "$LOGFILE"
	${IPTABLES} -F EASYSCP_INPUT  2>> "$LOGFILE"
	${IPTABLES} -F EASYSCP_OUTPUT 2>> "$LOGFILE"
	${IPTABLES} -X EASYSCP_INPUT  2>> "$LOGFILE"
	${IPTABLES} -X EASYSCP_OUTPUT 2>> "$LOGFILE"

	# Remove lock file
	rm $LFILE
}

add_interfaces() {
	${ENGINETOOLSPATH}/${NETWORKCARDMANAGER} start >${LOGDIR}/${NETWORKCARDMANAGER}.log 2>&1
}

remove_interfaces() {
	${ENGINETOOLSPATH}/${NETWORKCARDMANAGER} stop >${LOGDIR}/${NETWORKCARDMANAGER}.log 2>&1
}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"

	if [ -e "$LFILE" ]; then
		echo ""
	   	log_warning_msg "${NAME} is already started" >&2
	else
		add_interfaces
		add_rules
	fi

	log_end_msg $?
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	if [ ! -e "$LFILE" ]; then
		echo ""
		log_warning_msg "${NAME} is already stopped" >&2
	else
		remove_rules
		remove_interfaces
	fi

	log_end_msg $?
	;;
  restart|force-reload)
	log_daemon_msg "Stopping $DESC" "$NAME"

	if [ ! -e "$LFILE" ]; then
		echo ""
		log_warning_msg "${NAME} is already stopped" >&2
	else
		remove_rules
		remove_interfaces
		log_end_msg $?
		[ -n "$DIETIME" ] && sleep "$DIETIME"
	fi

	log_daemon_msg "Starting $DESC" "$NAME"

	add_interfaces
	add_rules

	log_end_msg $?

	;;
  status)
	log_daemon_msg "Checking status of $DESC" "$NAME"

	if [ ! -e "$LFILE" ]; then
	   log_progress_msg "stopped"
	else
	   log_progress_msg "started"
	fi

	echo ""
	;;
  *)
	echo "Usage: /etc/init.d/$NAME {start|stop|restart|force-reload|status}" >&2
	exit 1
	;;
esac

exit 0
